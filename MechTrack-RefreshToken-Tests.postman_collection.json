{
  "info": {
    "name": "MechTrack Refresh Token Tests",
    "description": "Test collection for the new refresh token functionality",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:8080",
      "type": "string"
    },
    {
      "key": "username",
      "value": "your_username_here",
      "type": "string"
    },
    {
      "key": "password",
      "value": "your_password_here",
      "type": "string"
    },
    {
      "key": "accessToken",
      "value": "",
      "type": "string"
    },
    {
      "key": "refreshToken",
      "value": "",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "1. Login (Get Tokens)",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Response has both tokens\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('accessToken');",
              "    pm.expect(jsonData).to.have.property('refreshToken');",
              "    pm.expect(jsonData).to.have.property('type', 'Bearer');",
              "    pm.expect(jsonData).to.have.property('username');",
              "    pm.expect(jsonData).to.have.property('accessTokenExpiresAt');",
              "    pm.expect(jsonData).to.have.property('refreshTokenExpiresAt');",
              "    ",
              "    // Store tokens for subsequent requests",
              "    pm.collectionVariables.set('accessToken', jsonData.accessToken);",
              "    pm.collectionVariables.set('refreshToken', jsonData.refreshToken);",
              "});",
              "",
              "pm.test(\"Tokens are not empty\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.accessToken).to.not.be.empty;",
              "    pm.expect(jsonData.refreshToken).to.not.be.empty;",
              "});",
              "",
              "pm.test(\"Expiration dates are in the future\", function () {",
              "    var jsonData = pm.response.json();",
              "    var now = new Date();",
              "    var accessExpiry = new Date(jsonData.accessTokenExpiresAt);",
              "    var refreshExpiry = new Date(jsonData.refreshTokenExpiresAt);",
              "    ",
              "    pm.expect(accessExpiry.getTime()).to.be.greaterThan(now.getTime());",
              "    pm.expect(refreshExpiry.getTime()).to.be.greaterThan(now.getTime());",
              "    pm.expect(refreshExpiry.getTime()).to.be.greaterThan(accessExpiry.getTime());",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"username\": \"{{username}}\",\n  \"password\": \"{{password}}\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/api/auth/login",
          "host": ["{{baseUrl}}"],
          "path": ["api", "auth", "login"]
        }
      }
    },
    {
      "name": "2. Validate Access Token",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Token is valid\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('valid', true);",
              "    pm.expect(jsonData).to.have.property('username');",
              "    pm.expect(jsonData).to.have.property('expiresAt');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{accessToken}}"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/api/auth/validate",
          "host": ["{{baseUrl}}"],
          "path": ["api", "auth", "validate"]
        }
      }
    },
    {
      "name": "3. Refresh Tokens",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Response has new tokens\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('accessToken');",
              "    pm.expect(jsonData).to.have.property('refreshToken');",
              "    pm.expect(jsonData).to.have.property('type', 'Bearer');",
              "    pm.expect(jsonData).to.have.property('username');",
              "    ",
              "    // Verify tokens are different from original",
              "    var oldAccessToken = pm.collectionVariables.get('accessToken');",
              "    var oldRefreshToken = pm.collectionVariables.get('refreshToken');",
              "    ",
              "    pm.expect(jsonData.accessToken).to.not.equal(oldAccessToken);",
              "    pm.expect(jsonData.refreshToken).to.not.equal(oldRefreshToken);",
              "    ",
              "    // Update stored tokens",
              "    pm.collectionVariables.set('accessToken', jsonData.accessToken);",
              "    pm.collectionVariables.set('refreshToken', jsonData.refreshToken);",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"refreshToken\": \"{{refreshToken}}\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/api/auth/refresh",
          "host": ["{{baseUrl}}"],
          "path": ["api", "auth", "refresh"]
        }
      }
    },
    {
      "name": "4. Validate New Access Token",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"New token is valid\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('valid', true);",
              "    pm.expect(jsonData).to.have.property('username');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Authorization",
            "value": "Bearer {{accessToken}}"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/api/auth/validate",
          "host": ["{{baseUrl}}"],
          "path": ["api", "auth", "validate"]
        }
      }
    },
    {
      "name": "5. Logout (Revoke Refresh Token)",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test(\"Logout successful\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('message', 'Logout successful');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"refreshToken\": \"{{refreshToken}}\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/api/auth/logout",
          "host": ["{{baseUrl}}"],
          "path": ["api", "auth", "logout"]
        }
      }
    },
    {
      "name": "6. Try Refresh with Revoked Token (Should Fail)",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 401\", function () {",
              "    pm.response.to.have.status(401);",
              "});",
              "",
              "pm.test(\"Error message is correct\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('status', 401);",
              "    pm.expect(jsonData).to.have.property('error', 'Token Validation Failed');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"refreshToken\": \"{{refreshToken}}\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/api/auth/refresh",
          "host": ["{{baseUrl}}"],
          "path": ["api", "auth", "refresh"]
        }
      }
    },
    {
      "name": "7. Try Refresh with Invalid Token (Should Fail)",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 401\", function () {",
              "    pm.response.to.have.status(401);",
              "});",
              "",
              "pm.test(\"Error message is correct\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('status', 401);",
              "    pm.expect(jsonData).to.have.property('error', 'Token Validation Failed');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"refreshToken\": \"invalid.token.here\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/api/auth/refresh",
          "host": ["{{baseUrl}}"],
          "path": ["api", "auth", "refresh"]
        }
      }
    }
  ]
}
